{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e64af4ac-593d-4540-947c-d29abc841ab7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Dataset:\n",
      "    Country  Year  Population       GDP  Life_Expectancy\n",
      "0      USA  2021   332000000  21500000             78.7\n",
      "1      USA  2020   331000000  21000000             78.6\n",
      "2    China  2021  1450000000  17700000             77.1\n",
      "3    China  2020  1440000000  16800000             77.0\n",
      "4  Germany  2021    83100000   4200000             81.3\n",
      "5  Germany  2020    83000000   4100000             81.0 \n",
      "\n",
      "Pandas mean:\n",
      " Population    6.198500e+08\n",
      "GDP           1.421667e+07\n",
      "dtype: float64\n",
      "\n",
      "Pandas sum:\n",
      " Population    3719100000\n",
      "GDP             85300000\n",
      "dtype: int64\n",
      "\n",
      "Pandas max:\n",
      " Population    1450000000\n",
      "GDP             21500000\n",
      "dtype: int64\n",
      "\n",
      "Pandas min:\n",
      " Population    83000000\n",
      "GDP            4100000\n",
      "dtype: int64\n",
      "\n",
      "NumPy mean: 14216666.666666666\n",
      "NumPy std: 7309221.72479548\n",
      "NumPy sum: 85300000 \n",
      "\n",
      "After increasing GDP by 10%:\n",
      "    Country  Year         GDP\n",
      "0      USA  2021  23650000.0\n",
      "1      USA  2020  23100000.0\n",
      "2    China  2021  19470000.0\n",
      "3    China  2020  18480000.0\n",
      "4  Germany  2021   4620000.0\n",
      "5  Germany  2020   4510000.0 \n",
      "\n",
      "After swaplevel() and sorting by Year:\n",
      "               Population         GDP  Life_Expectancy\n",
      "Year Country                                         \n",
      "2020 China    1440000000  18480000.0             77.0\n",
      "     Germany    83000000   4510000.0             81.0\n",
      "     USA       331000000  23100000.0             78.6\n",
      "2021 China    1450000000  19470000.0             77.1\n",
      "     Germany    83100000   4620000.0             81.3\n",
      "     USA       332000000  23650000.0             78.7 \n",
      "\n",
      "After unstack():\n",
      "          Population                     GDP             Life_Expectancy      \n",
      "Year           2020        2021        2020        2021            2020  2021\n",
      "Country                                                                      \n",
      "China    1440000000  1450000000  18480000.0  19470000.0            77.0  77.1\n",
      "Germany    83000000    83100000   4510000.0   4620000.0            81.0  81.3\n",
      "USA       331000000   332000000  23100000.0  23650000.0            78.6  78.7 \n",
      "\n",
      "China Population Trend over Years:\n",
      " Year\n",
      "2021    1450000000\n",
      "2020    1440000000\n",
      "Name: Population, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "data = {\n",
    "    'Country': ['USA', 'USA', 'China', 'China', 'Germany', 'Germany'],\n",
    "    'Year': [2021, 2020, 2021, 2020, 2021, 2020],\n",
    "    'Population': [332000000, 331000000, 1450000000, 1440000000, 83100000, 83000000],\n",
    "    'GDP': [21500000, 21000000, 17700000, 16800000, 4200000, 4100000],\n",
    "    'Life_Expectancy': [78.7, 78.6, 77.1, 77.0, 81.3, 81.0]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "print(\"Original Dataset:\\n\", df, \"\\n\")\n",
    "\n",
    "\n",
    "print(\"Pandas mean:\\n\", df[['Population', 'GDP']].mean())\n",
    "print(\"\\nPandas sum:\\n\", df[['Population', 'GDP']].sum())\n",
    "print(\"\\nPandas max:\\n\", df[['Population', 'GDP']].max())\n",
    "print(\"\\nPandas min:\\n\", df[['Population', 'GDP']].min())\n",
    "\n",
    "print(\"\\nNumPy mean:\", np.mean(df['GDP']))\n",
    "print(\"NumPy std:\", np.std(df['GDP']))\n",
    "print(\"NumPy sum:\", np.sum(df['GDP']), \"\\n\")\n",
    "\n",
    "\n",
    "df['GDP'] = df['GDP'] * 1.10\n",
    "print(\"After increasing GDP by 10%:\\n\", df[['Country', 'Year', 'GDP']], \"\\n\")\n",
    "\n",
    "\n",
    "df_multi = df.set_index(['Country', 'Year'])\n",
    "df_swapped = df_multi.swaplevel().sort_index()\n",
    "print(\"After swaplevel() and sorting by Year:\\n\", df_swapped, \"\\n\")\n",
    "\n",
    "\n",
    "unstacked = df_swapped.unstack(level='Year')\n",
    "print(\"After unstack():\\n\", unstacked, \"\\n\")\n",
    "\n",
    "\n",
    "china_trend = df_multi.loc['China']['Population']\n",
    "print(\"China Population Trend over Years:\\n\", china_trend)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "471b084f-f842-4327-aaf1-d15852748310",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f7a980fb-f695-4f95-9ba8-9a5326e1dce1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Dataset:\n",
      "          Date Region Salesperson   Product  Units Sold  Price per Unit  \\\n",
      "0  2024-01-01  North       Alice  Widget A          10              20   \n",
      "1  2024-01-02  North         Bob  Widget B           8              30   \n",
      "2  2024-01-03  South     Charlie  Widget A          15              20   \n",
      "3  2024-01-03   East       Alice  Widget B          12              20   \n",
      "4  2024-01-04   West       David  Widget B           9              30   \n",
      "5  2024-01-04  South     Charlie  Widget A          10              30   \n",
      "6  2024-01-05   East       Alice  Widget B           9              30   \n",
      "\n",
      "   Revenue  \n",
      "0      200  \n",
      "1      240  \n",
      "2      300  \n",
      "3      240  \n",
      "4      270  \n",
      "5      300  \n",
      "6      270   \n",
      "\n",
      "1. Total revenue generated by each salesperson on each date:\n",
      " Salesperson  Alice  Bob  Charlie  David\n",
      "Date                                   \n",
      "2024-01-01     200    0        0      0\n",
      "2024-01-02       0  240        0      0\n",
      "2024-01-03     240    0      300      0\n",
      "2024-01-04       0    0      300    270\n",
      "2024-01-05     270    0        0      0 \n",
      "\n",
      "2. Average revenue per sale for each product:\n",
      " Product\n",
      "Widget A    266.666667\n",
      "Widget B    255.000000\n",
      "Name: Revenue, dtype: float64 \n",
      "\n",
      "3. Maximum units sold in a single transaction by each salesperson:\n",
      " Salesperson\n",
      "Alice      12\n",
      "Bob         8\n",
      "Charlie    15\n",
      "David       9\n",
      "Name: Units Sold, dtype: int64 \n",
      "\n",
      "4. Percentage of total revenue by each region:\n",
      " Region\n",
      "East     28.021978\n",
      "North    24.175824\n",
      "South    32.967033\n",
      "West     14.835165\n",
      "Name: Revenue, dtype: float64 \n",
      "\n",
      "5. Salesperson with most sales transactions: Alice \n",
      "\n",
      "   Transaction counts:\n",
      " Salesperson\n",
      "Alice      3\n",
      "Charlie    2\n",
      "Bob        1\n",
      "David      1\n",
      "Name: count, dtype: int64 \n",
      "\n",
      "6. Total revenue and total units sold by each salesperson for each product:\n",
      "              Revenue          Units Sold         \n",
      "Product     Widget A Widget B   Widget A Widget B\n",
      "Salesperson                                      \n",
      "Alice            200      510         10       21\n",
      "Bob                0      240          0        8\n",
      "Charlie          600        0         25        0\n",
      "David              0      270          0        9 \n",
      "\n",
      "7. Total units sold in each region on each date:\n",
      " Region      East  North  South  West\n",
      "Date                                \n",
      "2024-01-01     0     10      0     0\n",
      "2024-01-02     0      8      0     0\n",
      "2024-01-03    12      0     15     0\n",
      "2024-01-04     0      0     10     9\n",
      "2024-01-05     9      0      0     0 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "\n",
    "data = {\n",
    "    'Date': ['2024-01-01', '2024-01-02', '2024-01-03', '2024-01-03',\n",
    "             '2024-01-04', '2024-01-04', '2024-01-05'],\n",
    "    'Region': ['North', 'North', 'South', 'East', 'West', 'South', 'East'],\n",
    "    'Salesperson': ['Alice', 'Bob', 'Charlie', 'Alice', 'David', 'Charlie', 'Alice'],\n",
    "    'Product': ['Widget A', 'Widget B', 'Widget A', 'Widget B', 'Widget B', 'Widget A', 'Widget B'],\n",
    "    'Units Sold': [10, 8, 15, 12, 9, 10, 9],\n",
    "    'Price per Unit': [20, 30, 20, 20, 30, 30, 30]\n",
    "}\n",
    "\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "df['Revenue'] = df['Units Sold'] * df['Price per Unit']\n",
    "print(\"Original Dataset:\\n\", df, \"\\n\")\n",
    "\n",
    "\n",
    "pivot1 = pd.pivot_table(df, values='Revenue', index='Date', columns='Salesperson', aggfunc='sum', fill_value=0)\n",
    "print(\"1. Total revenue generated by each salesperson on each date:\\n\", pivot1, \"\\n\")\n",
    "\n",
    "\n",
    "avg_revenue = df.groupby('Product')['Revenue'].mean()\n",
    "print(\"2. Average revenue per sale for each product:\\n\", avg_revenue, \"\\n\")\n",
    "\n",
    "\n",
    "max_units = df.groupby('Salesperson')['Units Sold'].max()\n",
    "print(\"3. Maximum units sold in a single transaction by each salesperson:\\n\", max_units, \"\\n\")\n",
    "\n",
    "\n",
    "region_revenue = df.groupby('Region')['Revenue'].sum()\n",
    "percent_region = (region_revenue / region_revenue.sum()) * 100\n",
    "print(\"4. Percentage of total revenue by each region:\\n\", percent_region, \"\\n\")\n",
    "\n",
    "\n",
    "sales_count = df['Salesperson'].value_counts()\n",
    "top_salesperson = sales_count.idxmax()\n",
    "print(\"5. Salesperson with most sales transactions:\", top_salesperson, \"\\n\")\n",
    "print(\"   Transaction counts:\\n\", sales_count, \"\\n\")\n",
    "\n",
    "\n",
    "pivot2 = pd.pivot_table(df, index='Salesperson', columns='Product',\n",
    "                        values=['Revenue', 'Units Sold'], aggfunc='sum', fill_value=0)\n",
    "print(\"6. Total revenue and total units sold by each salesperson for each product:\\n\", pivot2, \"\\n\")\n",
    "\n",
    "pivot3 = pd.pivot_table(df, values='Units Sold', index='Date', columns='Region', aggfunc='sum', fill_value=0)\n",
    "print(\"7. Total units sold in each region on each date:\\n\", pivot3, \"\\n\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ee1bb790-45d1-4cff-912e-2dfe84e8b0c4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "823adb02-882e-4cae-8a43-f1ae33d1f10a",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "781a0838-93b7-4908-9e7e-8e02a0d374ed",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
